use std::str::FromStr;
use crate::ast::*;
use lalrpop_util::ParseError;
use anyhow::Error;

grammar;

extern {
    type Error = Error;
}

Comma<T>: Vec<T> = { 
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

SemiComma<T>: Vec<T> = { 
    <v:(<T> ";")*> => v
};

Vec<T>: Vec<T> = {
    <v:(<T>)*> => v
};

pub Pars  = Comma<Par>;

Par : Identifier = {
    <id:Id> ":" <dat:DataType> => {
        id.update_ty(dat)
    }
};
pub Program : Program = <decls:Vec<Decl>> => {
    Program {
        functions: decls.clone().into_iter()
                        .filter_map(|w| match w { Decl::Func(f) => Some(f), _ => None })
                        .collect(),
        structs: decls.clone().into_iter()
                        .filter_map(|w| match w { Decl::Struct(f) => Some(f), _ => None })
                        .collect()
    }
};

pub Decl: Decl = {
    <f:Funcdef> => Decl::Func(f),
    <s:Struct> => Decl::Struct(s)
};

pub Funcdef : Func = {
	"fn" <id:Id> "(" <pars:Pars> ")" "{" <statements:Statement*> "}" =>? Func::new(id, pars, statements, None).map_err(|w| ParseError::User {
        error: w
    }),
    "fn" <id:Id> "(" <pars:Pars> ")" "->" <ret:DataType>  "{" <statements:Statement*> "}" =>? Func::new(id, pars, statements, Some(ret)).map_err(|w| ParseError::User {
        error: w
    })
};

pub Struct : Struct = {
    "struct" <id:Id> "{" <fields:Comma<Field>> "}" =>? Struct::new(id, fields).map_err(|w| ParseError::User {
        error: w
    })
};

Field: Field = {
    <id:Id> ":" <dat:DataType> => Field::new(id, dat)
};

DataType: DataType = {
    "int" => DataType::Int,
    <id:Id> => DataType::Struct(Box::new(id))
}

pub Statement: Box<Statement> = {
	"return" ";" => Box::new(Statement::RetVoid),
	"return" <e:Expr> ";" => Box::new(Statement::Ret(e)),
    "let" <id:Id> ":" <dat:DataType> "=" <e:Expr> ";" => {
        Box::new(Statement::Assign(id.update_ty(dat), e))
    },
    <id:Id> "=" <e:Expr> ";" => Box::new(Statement::ReAssign(id, e)),
    <id:Id> "." <field:Id> "=" <e:Expr> ";" =>
        Box::new(Statement::ReAssign(id.update_field_access(Some(field)), e)),
	"let" <id:Id> "=" "new" <st:Id> ";" =>
        Box::new(Statement::Allocate(id.update_ty(DataType::Struct(Box::new(st.clone()))), st)),
    "if" <e:Expr> "{" <stats:Statement*> "}" => Box::new(Statement::Conditional(e, stats))
};

pub Expr: Box<Expr> = {
    <n1:Term> <op:BinOp> <n2:Term> => Box::new(Expr::Dual(op, n1, n2)),
    "(" <n1:Term> <op:BinOp> <n2:Term> ")" => Box::new(Expr::Dual(Opcode::Geq, n1, n2)),
	<id:Id> "(" <exprs:Exprs> ")" => Box::new(Expr::Call(id, exprs)),
    <n1:Term> => Box::new(Expr::Single(n1)),
};

Exprs: Vec<Box<Expr>> = Comma<Expr>;

BinOp: Opcode = {
    "+" => Opcode::Add,
    "==" => Opcode::Cmp
};

pub Term: Box<Term> = {
	Num => Box::new(Term::Num(<>)),
	Id => Box::new(Term::Id(<>)),
    <obj:Id> "." <field:Id> => 
        Box::new(Term::Object(obj.update_field_access(Some(field.clone())), field)),
	"(" <n:Term> ")" => n,
};

pub Id: Identifier = <l:@L> <s:r"[a-zA-Z][a-zA-Z0-9]*"> <r:@R> => Identifier::new(s.to_string(), l, r, None);
Num: i64= <s:r"[0-9]+"> => i64::from_str(s).unwrap();
