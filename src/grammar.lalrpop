use std::str::FromStr;
use crate::ast::{Program, Expr, Term, Opcode, Statement, Func, Continuation, Guard, Error};
use lalrpop_util::ParseError;

grammar;

extern {
    type Error = Error;
}

Comma<T>: Vec<T> = { 
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

SemiComma<T>: Vec<T> = { 
    <v:(<T> ";")*> => v
};

pub Pars = Comma<Id>;
pub Program : Program = <funcs:SemiComma<Funcdef>> => Program {
    functions: funcs
};
pub Funcdef : Func = {
	<id:Id> "(" <pars:Pars> ")" <statements:Statements> "end" =>? Func::new(id, pars, statements).map_err(|w| ParseError::User {
        error: w
    })
};

pub Statements = SemiComma<Statement>;

pub Statement: Box<Statement> = {
	"return" <e:Expr> => Box::new(Statement::Ret(e)),
    "var" <id:Id> "=" <e:Expr> => Box::new(Statement::Assign(id, e)),
    <id:Id> ":" <cond:Conditional> => Box::new(Statement::Conditional(Some(id), cond)),
    <cond:Conditional> => Box::new(Statement::Conditional(None, cond)),
	<id:Id> "=" <e:Expr> => Box::new(Statement::ReAssign(id, e))
};

pub Conditional: Vec<Box<Guard>> = {
    "cond" <guards:SemiComma<Guard>> "end" => guards
};

pub Guard: Box<Guard> = {
    <e:Expr?> "->" <stats:Statements> <cont:Continuation> => Box::new(Guard {
        guard: e,
        statements: stats,
        continuation: cont,
    })
};

Continuation: Continuation = {
    "continue" => Continuation::Continue(None),
    "break" => Continuation::Break(None),
    "continue" <id:Id> => Continuation::Continue(Some(id)),
    "break" <id:Id> => Continuation::Break(Some(id)),
};

pub Expr: Box<Expr> = {
	"not" <n:Term> => Box::new(Expr::Unchained(Opcode::Not, n)),
	"head" <n:Term> => Box::new(Expr::Unchained(Opcode::Head, n)),
	"tail" <n:Term> => Box::new(Expr::Unchained(Opcode::Tail, n)),
    "islist" <n:Term> => Box::new(Expr::Unchained(Opcode::IsList, n)),
    <n1:Term> ">=" <n2:Term> => Box::new(Expr::Dual(Opcode::Geq, n1, n2)),
    <n1:Term> "==" <n2:Term> => Box::new(Expr::Dual(Opcode::Cmp, n1, n2)),
    <expr:ChainedExpr> => expr,
};

ChainedExpr: Box<Expr> = {
    <n1:Term> <op:ExprOp> <n2:ChainedExpr> => Box::new(Expr::Chained(op, n1, n2)),
    <n:Term> => Box::new(Expr::Single(n)),
};

Exprs: Vec<Box<Expr>> = Comma<Expr>;

ExprOp: Opcode = {
	"+" => Opcode::Add,
	"-" => Opcode::Sub,
	"or" => Opcode::Or,
	"." => Opcode::Dot,
};

pub Term: Box<Term> = {
	Num => Box::new(Term::Num(<>)),
	Id => Box::new(Term::Id(<>)),
	"(" <n:Term> ")" => n,
	<id:Id> "(" <exprs:Exprs> ")" => Box::new(Term::Call(id, exprs)),
};

pub Id: String = <s:r"[a-zA-Z][a-zA-Z0-9]*"> => s.to_string();
Num: i64= <s:r"[0-9]+"> => i64::from_str(s).unwrap();
